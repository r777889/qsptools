package hmi.log;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.logging.Level;
import javax.swing.WindowConstants;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author pseudo555
 */
public class QspLogger extends javax.swing.JDialog {
    
    private static final String CRLN = "\n";
    
    private static QspLogger last = null;
    private static StringBuilder sb = new StringBuilder();

    /**
     * Retrieve unique instance of logger console
     * @param frame
     * @return QspLogger
     */
    public static QspLogger getInstance(java.awt.Frame frame) {
        if(last == null){
            last = new QspLogger(frame);
        }
        return last;
    }
    
    /**
     * Creates new form QspLogger
     * @param parent
     */
    private QspLogger(java.awt.Frame parent) {
        super(parent, false);
        initComponents();
        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        setSize(400, 600);
        setTitle("QspTools console");
        console.setEditable(false);
        DefaultCaret caret = (DefaultCaret)console.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);  
        clearBtn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                sb.delete(0, sb.length());
                updateText();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        content = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        clearBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        content.setLayout(new java.awt.GridBagLayout());

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        content.add(jScrollPane1, gridBagConstraints);

        clearBtn.setText("Clear");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        content.add(clearBtn, gridBagConstraints);

        getContentPane().add(content, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextArea console;
    private javax.swing.JPanel content;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public static void log(Level SEVERE, String msg, Exception ex) {
        sb.append(msg).append(CRLN);
        // stack trace as a string
        if(ex != null) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            ex.printStackTrace(pw);
            sb.append(sw.toString()).append(CRLN); 
        }
        
        
        if(last != null){
            last.updateText();
        }
    }

    public static void info(String msg) {
        log(Level.INFO, msg, null);
    }

    public static void error(String msg) {
        log(Level.SEVERE, msg, null);
    }

    public static void debug(String msg) {
        log(Level.FINEST, msg, null);
    }
    
    public static String toString(byte[] bytes){
        StringBuilder s = new StringBuilder();
        for(byte b : bytes){
            s.append((int)b).append(" ");
        }
        return s.toString();
    }

    public void updateText() {
        console.setText(sb.toString());
    }
}
